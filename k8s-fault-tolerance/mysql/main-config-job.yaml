# This job configures mysql-main-0 and mysql-main-1 for bi-directional replication
# It assumes that the two servers are freshly installed

apiVersion: batch/v1
kind: Job
metadata:
  name: config-main
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: config-main
        image: mysql:8.0.32
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: root-password
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: replication-password
        command:
        - bash
        - "-c"
        - |
          #!/bin/bash

          export MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
          export MYSQL_REPLICATION_PASSWORD=$MYSQL_REPLICATION_PASSWORD
          export MYSQL_MAIN_0=mysql-main-0.mysql-main
          export MYSQL_MAIN_1=mysql-main-1.mysql-main
          export MYSQL_PWD=$MYSQL_ROOT_PASSWORD

          echo "started" > /tmp/trace.txt

          # Exit on error
          set -e

          # Wait until databases are up
          until echo "select 1" | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_0 -u root
          do
            echo waiting for mysql 0 up
            echo "waiting for mysql up" >> /tmp/trace.txt
            sleep 1
          done

          until echo "select 1" | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_1 -u root
          do
            echo waiting for mysql 1 up
            echo "waiting for remote mysql up" >> /tmp/trace.txt
            sleep 1
          done

          # Create replication user
          echo "
            CREATE USER IF NOT EXISTS 'replication_user'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_REPLICATION_PASSWORD';
            GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'%';
            FLUSH PRIVILEGES;
          " | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_0 -u root 

          echo "
            CREATE USER IF NOT EXISTS 'replication_user'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_REPLICATION_PASSWORD';
            GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'%';
            FLUSH PRIVILEGES;
          " | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_1 -u root 
          
          echo "replication user created" >> /tmp/trace.txt

          # Backup skipped

          # Configure replicas
          echo "
          # To make idempotent
          STOP REPLICA;
          RESET REPLICA;
          CHANGE REPLICATION SOURCE TO
            SOURCE_USER='replication_user',
            SOURCE_PASSWORD=\"$MYSQL_REPLICATION_PASSWORD\",
            SOURCE_HOST=\"$MYSQL_MAIN_1\",
            SOURCE_AUTO_POSITION=1
            FOR CHANNEL 'main';
            
            START REPLICA FOR CHANNEL 'main';
          "| MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_0 -u root 
            
          echo "replica 0 configured" >> /tmp/trace.txt

          sleep 1

          # Check that all the _Errno lines report 0
          echo 'show replica status\G' | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_0 -u root | awk '/_Errno/ {if ($2 != "0") exit 1}'

          echo "
          # To make idempotent
          STOP REPLICA;
          RESET REPLICA;
          CHANGE REPLICATION SOURCE TO
            SOURCE_USER='replication_user',
            SOURCE_PASSWORD=\"$MYSQL_REPLICATION_PASSWORD\",
            SOURCE_HOST=\"$MYSQL_MAIN_0\",
            SOURCE_AUTO_POSITION=1
            FOR CHANNEL 'main';
            
            START REPLICA FOR CHANNEL 'main';
          "| MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_1 -u root 
            

          echo "replica 0 configured" >> /tmp/trace.txt

          sleep 1

          # Check that all the _Errno lines report 0
          echo 'show replica status\G' | MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -h $MYSQL_MAIN_1 -u root | awk '/_Errno/ {if ($2 != "0") exit 1}'

    